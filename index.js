var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var dnshttpOriginal = /** @class */ (function (_super) {
    __extends(dnshttpOriginal, _super);
    function dnshttpOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    dnshttpOriginal.prototype.post = function (url, body, options) { return cordova(this, "post", {}, arguments); };
    dnshttpOriginal.pluginName = "dnshttp";
    dnshttpOriginal.plugin = "cordova-plugin-dnshttp";
    dnshttpOriginal.pluginRef = "dnshttp";
    dnshttpOriginal.repo = "";
    dnshttpOriginal.install = "";
    dnshttpOriginal.installVariables = [];
    dnshttpOriginal.platforms = ["Android"];
    return dnshttpOriginal;
}(AwesomeCordovaNativePlugin));
var dnshttp = new dnshttpOriginal();
export { dnshttp };
//# sourceMappingURL=data:application/json;base64,