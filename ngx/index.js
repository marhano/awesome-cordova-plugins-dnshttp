import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var dnshttp = /** @class */ (function (_super) {
    __extends(dnshttp, _super);
    function dnshttp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    dnshttp.prototype.post = function (url, body, options, dns) { return cordova(this, "post", {}, arguments); };
    dnshttp.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: dnshttp, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    dnshttp.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: dnshttp });
    dnshttp.pluginName = "dnshttp";
    dnshttp.plugin = "";
    dnshttp.pluginRef = "dnshttp";
    dnshttp.repo = "";
    dnshttp.install = "";
    dnshttp.installVariables = [];
    dnshttp.platforms = ["Android"];
    dnshttp = __decorate([], dnshttp);
    return dnshttp;
}(AwesomeCordovaNativePlugin));
export { dnshttp };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: dnshttp, decorators: [{
            type: Injectable
        }], propDecorators: { post: [] } });
//# sourceMappingURL=data:application/json;base64,